"""Initial migration

Revision ID: e805a8ffaefa
Revises: a34fac9461f8
Create Date: 2025-04-14 14:30:15.659178

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e805a8ffaefa'
down_revision: Union[str, None] = 'a34fac9461f8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('badges',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('is_important', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cuisine_regions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('diet_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dish_types',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('equipments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ingredients',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('intolerances',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('nutrients',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('price', sa.Float(), nullable=True),
    sa.Column('category', sa.String(length=255), nullable=True),
    sa.Column('calories', sa.Float(), nullable=True),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.Column('image_type', sa.String(length=50), nullable=True),
    sa.Column('brand', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('recipes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('spoonacular_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.Column('image_type', sa.String(length=50), nullable=True),
    sa.Column('ready_min', sa.Integer(), nullable=True),
    sa.Column('servings', sa.Integer(), nullable=True),
    sa.Column('vegetarian', sa.Boolean(), nullable=True),
    sa.Column('vegan', sa.Boolean(), nullable=True),
    sa.Column('gluten_free', sa.Boolean(), nullable=True),
    sa.Column('dairy_free', sa.Boolean(), nullable=True),
    sa.Column('very_healthy', sa.Boolean(), nullable=True),
    sa.Column('cheap', sa.Boolean(), nullable=True),
    sa.Column('very_popular', sa.Boolean(), nullable=True),
    sa.Column('sustainable', sa.Boolean(), nullable=True),
    sa.Column('low_fodmap', sa.Boolean(), nullable=True),
    sa.Column('preparation_min', sa.Integer(), nullable=True),
    sa.Column('cooking_min', sa.Integer(), nullable=True),
    sa.Column('price_per_serving', sa.Float(), nullable=True),
    sa.Column('summary', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('spoonacular_id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sub', sa.String(length=255), nullable=True),
    sa.Column('username', sa.String(length=40), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=40), nullable=True),
    sa.Column('auth_method', sa.Enum('google', 'traditional', name='auth_method_types'), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('spoonacular_username', sa.String(length=255), nullable=True),
    sa.Column('spoonacular_hash', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('sub'),
    sa.UniqueConstraint('username')
    )
    op.create_table('ingredients_products',
    sa.Column('ingredient_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('ingredient_id', 'product_id')
    )
    op.create_table('instructions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('step_number', sa.Integer(), nullable=False),
    sa.Column('step_text', sa.String(length=1000), nullable=False),
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('meal_plans',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.TIMESTAMP(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products_badges',
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('badge_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['badge_id'], ['badges.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('product_id', 'badge_id')
    )
    op.create_table('products_nutrients',
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('nutrient_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['nutrient_id'], ['nutrients.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('product_id', 'nutrient_id')
    )
    op.create_table('recipes_cuisines',
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('cuisine_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cuisine_id'], ['cuisine_regions.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'cuisine_id')
    )
    op.create_table('recipes_diet_types',
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('diet_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['diet_type_id'], ['diet_types.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'diet_type_id')
    )
    op.create_table('recipes_dish_types',
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('dish_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['dish_type_id'], ['dish_types.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'dish_type_id')
    )
    op.create_table('recipes_nutrients',
    sa.Column('recipe_id', sa.Integer(), nullable=False),
    sa.Column('nutrient_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['nutrient_id'], ['nutrients.id'], ),
    sa.ForeignKeyConstraint(['recipe_id'], ['recipes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('recipe_id', 'nutrient_id')
    )
    op.create_table('user_preferences',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('diet_type_id', sa.Integer(), nullable=True),
    sa.Column('vegetarian', sa.Boolean(), nullable=True),
    sa.Column('vegan', sa.Boolean(), nullable=True),
    sa.Column('gluten_free', sa.Boolean(), nullable=True),
    sa.Column('dairy_free', sa.Boolean(), nullable=True),
    sa.Column('very_healthy', sa.Boolean(), nullable=True),
    sa.Column('cheap', sa.Boolean(), nullable=True),
    sa.Column('max_ready_min', sa.Integer(), nullable=True),
    sa.Column('servings', sa.Integer(), nullable=True),
    sa.Column('calories_goal', sa.Float(), nullable=True),
    sa.Column('sustainable', sa.Boolean(), nullable=True),
    sa.Column('low_fodmap', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['diet_type_id'], ['diet_types.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instructions_equipments',
    sa.Column('instruction_id', sa.Integer(), nullable=False),
    sa.Column('equipment_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['equipment_id'], ['equipments.id'], ),
    sa.ForeignKeyConstraint(['instruction_id'], ['instructions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('instruction_id', 'equipment_id')
    )
    op.create_table('meal_items',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('date', sa.TIMESTAMP(), nullable=False),
    sa.Column('day', sa.String(length=50), nullable=False),
    sa.Column('slot', sa.Integer(), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('meal_plan_id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('item_type', sa.Enum('RECIPE', 'PRODUCT', 'INGREDIENT', 'MENU_ITEM', 'CUSTOM_FOOD', name='mealitemtype'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['meal_plan_id'], ['meal_plans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_preferences_cuisines',
    sa.Column('preference_id', sa.Integer(), nullable=False),
    sa.Column('cuisine_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cuisine_id'], ['cuisine_regions.id'], ),
    sa.ForeignKeyConstraint(['preference_id'], ['user_preferences.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('preference_id', 'cuisine_id')
    )
    op.create_table('user_preferences_intolerances',
    sa.Column('preference_id', sa.Integer(), nullable=False),
    sa.Column('intolerance_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['intolerance_id'], ['intolerances.id'], ),
    sa.ForeignKeyConstraint(['preference_id'], ['user_preferences.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('preference_id', 'intolerance_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_preferences_intolerances')
    op.drop_table('user_preferences_cuisines')
    op.drop_table('meal_items')
    op.drop_table('instructions_equipments')
    op.drop_table('user_preferences')
    op.drop_table('recipes_nutrients')
    op.drop_table('recipes_dish_types')
    op.drop_table('recipes_diet_types')
    op.drop_table('recipes_cuisines')
    op.drop_table('products_nutrients')
    op.drop_table('products_badges')
    op.drop_table('meal_plans')
    op.drop_table('instructions')
    op.drop_table('ingredients_products')
    op.drop_table('users')
    op.drop_table('recipes')
    op.drop_table('products')
    op.drop_table('nutrients')
    op.drop_table('intolerances')
    op.drop_table('ingredients')
    op.drop_table('equipments')
    op.drop_table('dish_types')
    op.drop_table('diet_types')
    op.drop_table('cuisine_regions')
    op.drop_table('badges')
    # ### end Alembic commands ###
